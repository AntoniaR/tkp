# This is a set of unit tests in the presence of correlated noise.
# That noise was generated by convolving uncorrelated noise with the dirty beam of a certain VLA observation.
# See the file /home/hspreeuw/continued_from_MiniNoteBook/tests/unit/make_maps/make_map_for_unit_testing_deconvolve_from_clean_beam.py on pc-swinbank.
# 3969 identical extended sources on a regular 63*63 grid were convolved with the clean beam.
# The accuracy of the deconvolution algorithm, i.e., the deconvolution of the fitted parameters from the clean beam. is tested.
# It also tests the accuracy of the peak flux measurements.
# Bias up to 5 sigma is allowed.
# Remember that oversampling of the synthesized beam will likely reduce bias.
# Accuracy tests for integrated fluxes and positions will be added later, as well as tests for the kappa*sigma clipper and the deblending algorithm.

import unittest
import os
import tkp.sourcefinder.accessors as access
import numpy as np
import tkp.sourcefinder.image as imag 
from tkp.settings import datapath

max_bias=5.
number_inserted=3969
deconv_imposs=0
true_peak_flux=1063.67945065
true_deconv_smaj=2.*5.5956/2.
true_deconv_smin=0.5*4.6794/2.
true_deconv_bpa=-0.5*(-49.8)

class source_parameters(unittest.TestCase):
    def setUp(self):
        my_bgfile=access.FitsFile(os.path.join(datapath, 'CORRELATED_NOISE.FITS'))
        bgdata=imag.ImageData(my_bgfile).data
        my_fitsfile = access.FitsFile(os.path.join(datapath, 'TEST_DECONV.FITS'))
        my_image= imag.ImageData(my_fitsfile)
        # This is quite subtle. We bypass any possible flaws in the kappa, sigma clipping algorithm by supplying a background level and noise map.
        # In this way we make sure that any possible biases in the measured source parameters cannot come from biases in the background level.
        # The peak fluxes, in particular, can be biased low if the background levels are biased high.
        # The background and noise levels supplied here are the true values. 
        sextract_results = my_image.sextract(anl=6.,noisemap=np.std(bgdata)*np.ones((2048,2048)),bgmap=np.mean(bgdata)*np.ones((2048,2048)))
        self.number_sources=len(sextract_results)

        peak_fluxes=[]
        deconv_smajaxes=[]
        deconv_sminaxes=[]
        deconv_bpas=[]

        for sources in sextract_results:
            peak_fluxes.append([sources.peak.value,sources.peak.error])
            deconv_smajaxes.append([sources.smaj_dc.value,sources.smaj_dc.error])
            deconv_sminaxes.append([sources.smin_dc.value,sources.smin_dc.error])
            deconv_bpas.append([sources.theta_dc.value,sources.theta_dc.error])

        self.peak_fluxes=np.array(peak_fluxes)
        self.deconv_smajaxes=np.array(deconv_smajaxes)
        self.deconv_sminaxes=np.array(deconv_sminaxes)
        self.deconv_bpas=np.array(deconv_bpas)

    def testAllDeconvolved(self):
        self.assertEqual(np.where(np.isnan(self.deconv_smajaxes),1,0).sum(),0)
        self.assertEqual(np.where(np.isnan(self.deconv_sminaxes),1,0).sum(),0)
        self.assertEqual(np.where(np.isnan(self.deconv_bpas),1,0).sum(),0)

    def testNumSources(self):
        self.assertEqual(self.number_sources, number_inserted)

    def testPeakFluxes(self):
        peak_weights=1./self.peak_fluxes[:,1]**2
        sum_peak_weights=np.sum(peak_weights)
        av_peak=np.sum(self.peak_fluxes[:,0]*peak_weights/sum_peak_weights)
        av_peak_err=np.mean(self.peak_fluxes[:,1])
        signif_dev_peak=(true_peak_flux-av_peak)*np.sqrt(self.number_sources)/av_peak_err
        self.assertTrue(np.abs(signif_dev_peak)<max_bias)

    def testMajorAxes(self):
        smaj_weights=1./self.deconv_smajaxes[:,1]**2
        sum_smaj_weights=np.sum(smaj_weights)
        av_smaj=np.sum(self.deconv_smajaxes[:,0]*smaj_weights/sum_smaj_weights)
        av_smaj_err=np.mean(self.deconv_smajaxes[:,1])
        signif_dev_smaj=(true_deconv_smaj-av_smaj)*np.sqrt(self.number_sources)/av_smaj_err
        self.assertTrue(np.abs(signif_dev_smaj)<max_bias)

    def testMinorAxes(self):
        smin_weights=1./self.deconv_sminaxes[:,1]**2
        sum_smin_weights=np.sum(smin_weights)
        av_smin=np.sum(self.deconv_sminaxes[:,0]*smin_weights/sum_smin_weights)
        av_smin_err=np.mean(self.deconv_sminaxes[:,1])
        signif_dev_smin=(true_deconv_smin-av_smin)*np.sqrt(self.number_sources)/av_smin_err
        self.assertTrue(np.abs(signif_dev_smin)<max_bias)

    def testPositionAngles(self):
        bpa_weights=1./self.deconv_bpas[:,1]**2
        sum_bpa_weights=np.sum(bpa_weights)
        av_bpa=np.sum(self.deconv_bpas[:,0]*bpa_weights/sum_bpa_weights)
        av_bpa_err=np.mean(self.deconv_bpas[:,1])
        signif_dev_bpa=(true_deconv_bpa-av_bpa)*np.sqrt(self.number_sources)/av_bpa_err
        self.assertTrue(np.abs(signif_dev_bpa)<max_bias)


if __name__ == '__main__':
    unittest.main()    
