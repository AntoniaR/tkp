#!/bin/bash

###############################################################################
# The assumption here is that the monetdbd deamon program is running, so that #
# databases can be created.                                                   #
# And furthermore that mclient & monetdb are in the path, and the user/passw  #
# is monetdb.                                                                 #
###############################################################################


###############################################################################
# arguments:                                                                  #
# $1: host                                                                    #
# $2: database                                                                #
# $3 (optional): new user                                                     #
# $4 (optional): new password                                                 #
# $5 (optional): port                                                         #
# $6 (optional): controlport                                                  #
# $7 (optional): number of node (sharded set-up)                              #
#                if > 1 then the database name will be appended with the      #
#                node number                                                  #
###############################################################################

###############################################################################
# An example call of this script could be:                                    #
# %> ./setup.db.batch localhost test1 test1 test1 50000 50001                 #
# creates a db test1, with user/pw same as db name                            #
#                                                                             #
# %> ./setup.db.batch localhost node user pw 51000 51001 3                    #
# creates 3 dbs: node1,node2,node3, with user1/pw1,user2/pw2,user3/pw3,resp.  #
#                                                                             #
###############################################################################

if [ -z "$*" ]
then
    echo "Usage:"
    echo "$0 [options]  db-host  database-name  [ username ] [ password ] [ port ] [ controlport ] [ number-of-nodes ]"
    echo "Options: --no-create-database: do not create a database"
    exit ;
fi

create_database=1
# parse through options
while true
do
    case "$1" in
        --no-create-database) 
            unset create_database
            shift 1
            ;;
        --) 
	    # end of all options
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

# Set up defaults
host=$1
dbname0=$2
if [ -z "$3" ]
then
    username0=$dbname
else
    username0=$3
fi
if [ -z "$4" ]
then
    password0=$dbname
else
    password0=$4
fi
if [ -z "$5" ]
then
    port=50000
else
    port=$5
fi
if [ -z "$6" ]
then
    controlport=50001
else
    controlport=$6
fi
if [ -z "$7" ]
then
    nodes=1
else
    nodes=$7
fi

NODE=1
until [ $NODE -gt $nodes ]; do
    #echo Value of node is: $NODE
    dbname=$dbname0$NODE
    username=$username0$NODE
    password=$password0$NODE
    echo Working on node $NODE
    #mstring="-d$dbname -u$username -pw$password"
    #echo $mstring

monetdb_login=""
if [ -f ${HOME}/.meropass ]
then
    monetdb_login="-h$host -p$controlport -P"`cat ${HOME}/.meropass`
fi

#echo "monetdb_login: $monetdb_login"

if [ -n "$create_database" ]
# Need to create a new database
then
    echo "(re)creating $dbname at $host"
    monetdb $monetdb_login stop $dbname
    monetdb $monetdb_login destroy -f $dbname
    monetdb $monetdb_login create $dbname || exit 1
    monetdb $monetdb_login start $dbname || exit 1
    
    adminuser=$username
    adminpassword=$password
    
    # Is this block necessary ? 
    DEFAULTDOTFILE=.monetdb
    #if [ -z "$MONETDBHOME" ]
    #then
    #    MONETDBHOME=$HOME
    #fi
    #DOTMONETDBFILE=$MONETDBHOME/$DEFAULTDOTFILE
    DOTMONETDBFILE=$HOME/$DEFAULTDOTFILE
    #export DOTMONETDBFILE
    
    # set up a default .monetdb file, with default pass
    cat > $DOTMONETDBFILE <<EOF
user=monetdb
password=monetdb
EOF
    
    echo "changing monetdb/monetdb user/password into:"
    echo "user: ${adminuser}"
    echo "password: ${adminpassword}"
    mclient -h$host -p$port -d$dbname <<-EOF
ALTER USER "monetdb" RENAME TO "${adminuser}";
ALTER USER SET PASSWORD '${adminpassword}' USING OLD PASSWORD 'monetdb';
CREATE SCHEMA "${dbname}" AUTHORIZATION "${adminuser}";
ALTER USER "${adminuser}" SET SCHEMA "${dbname}";
EOF
    
    # Here we set the DOTMONETDBFILE to the current dbname
    #DOTMONETDBFILE=$MONETDBHOME/.${dbname}
    DOTMONETDBFILE=$HOME/.${dbname}
    cat > $DOTMONETDBFILE <<EOF
user=${adminuser}
password=${adminpassword}
EOF
    
    chmod go-rwx $DOTMONETDBFILE
else
    monetdb $monetdb_login lock ${dbname}
fi
export DOTMONETDBFILE

if [ -z "$MONETDBTKPHOME" ]
# user didn't define a 'home' (base) directory; make a good guess
then
    MONETDBTKPHOME=`dirname $0`/..
fi


echo -e "\t----------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables"
echo -e "\t----------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table versions"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.versions.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table frequencybands"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.frequencybands.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table datasets"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.datasets.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table images"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.images.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table catalogs"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.catalogs.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table catalogedsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.catalogedsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table extractedsources"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.extractedsources.sql || exit 1
$MONETDBTKPHOME/tables/create.table.extractedsources.sh $host $dbname $port $NODE $nodes || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table assoccatsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.assoccatsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table assocxtrsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.assocxtrsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table lsm"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.lsm.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} table spectralindices"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.spectralindices.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table runningcatalog"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.runningcatalog.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table temprunningcatalog"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.temprunningcatalog.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table detections"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.detections.sql || exit 1

echo -e "\t-------------------------------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables for sharded database"
echo -e "\t-------------------------------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table node"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.node.sql || exit 1

echo -e "\t-------------------------------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables for cross-catalogue association"
echo -e "\t-------------------------------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table selectedcatsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.selectedcatsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table tempmergedcatalogs"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.tempmergedcatalogs.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table mergedcatalogs"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.mergedcatalogs.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table assoccrosscatsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.assoccrosscatsources.sql || exit 1

echo -e "\t----------------------------------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables to store detected transients & classifications "
echo -e "\t----------------------------------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table monitoringlist"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.monitoringlist.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table transients"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.transients.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table classification"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.classification.sql || exit 1

echo -e "\t-------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} functions"
echo -e "\t-------------------------------------------"

# These functions are also mbedded in the sys schema
echo -e "\t\tCreating MonetDB ${dbname} math functions"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/monetdb_10_math.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} date functions"
#mclient -p$port -h$host -d${dbname} < ${MONETDBHOME}/lib/MonetDB5/date.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} times functions"
#mclient -p$port -h$host -d${dbname} < ${MONETDBHOME}/lib/MonetDB5/times.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} mtime functions"
#mclient -p$port -h$host -d${dbname} < /scratch/bscheers/databases/MonetDB/share/MonetDB/sql/mtime.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function alpha"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.alpha.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getDistanceArcsec"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getDistanceArcsec.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getDistanceXSource2CatArcsec"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getDistanceXSource2CatArcsec.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getDistanceXSourcesArcsec"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getDistanceXSourcesArcsec.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function solidangle_arcsec2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.solidangle_arcsec2.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function nearestNeighborInCat"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.nearestNeighborInCat.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getNeighborsinCat"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getNeighborsInCat.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getNearestNeighborInCat"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getNearestNeighborInCat.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getNearestNeighborInImage"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getNearestNeighborInImage.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getBand"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getBand.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function decl2deg"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.decl2deg.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function decl2dms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.decl2dms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function decl2bbsdms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.decl2bbsdms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function insertDataset"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.insertDataset.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function insertImage"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.insertImage.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getAssocParams"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getAssocParams.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getAssocParamsByPos"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getAssocParamsByPos.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function ra2deg"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.ra2deg.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function ra2hms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.ra2hms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function ra2bbshms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.ra2bbshms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getSkyDensity_deg2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getSkyDensity_sr.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getHuynhSkyDensity_deg2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getHuynhSkyDensity_deg2.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function localSourceDensityInCat_deg2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.localSourceDensityInCat_deg2.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function neighborsInCatsParams"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.neighborsInCatsParams.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function neighborsInCats"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.neighborsInCats.sql || exit 1


echo -e "\t----------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} general procedures"
echo -e "\t----------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} general procedure BuildFrequencyBands"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.BuildFrequencyBands.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} general procedure InsertVersion"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.InsertVersion.sql || exit 1 

echo -e "\t\tCreating MonetDB ${dbname} general procedure BuildNodes"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.BuildNodes.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} general procedure LoadLSM"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.LoadLSM.sql || exit 1

#echo -e "\t-----------------------------------------------------------------------------"
#echo -e "\tCreating MonetDB ${dbname} procedures for multiple catalog association"
#echo -e "\t-----------------------------------------------------------------------------"

#echo -e "\t\tCreating MonetDB ${dbname} specific procedure MultipleCatMatchingInit"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.MultipleCatMatchingInit.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} specific procedure MultipleCatMatching"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.MultipleCatMatching.sql || exit 1

echo -e "\t-----------------------------------"
echo -e "\tInitialize MonetDB ${dbname}"
echo -e "\t-----------------------------------"

echo -e "\t\tInitialize MonetDB ${dbname} tables"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/init/init.shard.tables.sql || exit 1

echo -e "\t----------------------------------------------"
echo -e "\tLoading catalogs into MonetDB ${dbname}"
echo -e "\t----------------------------------------------"

echo -e "\t\tLoad NVSS catalog"
time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.nvss.sql || exit 1

echo -e "\t\tLoad VLSS catalog"
time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.vlss.sql || exit 1

echo -e "\t\tLoad WENSS catalog"
time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.wenss.sql || exit 1 

#echo -e "\t\tLoad EXOplanets catalog"
#time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.exo.sql || exit 1

#echo -e "\t\tLoad GRB catalog"
#mclient -p$port -lsql -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.grb.sql || exit 1
#date '+%Y-%m-%d-%H:%M:%S'

#echo -e "\t\tLoad SIMDATA catalog"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.simdata.sql || exit 1
#date '+%Y-%m-%d-%H:%M:%S'

#echo -e "\t\tLoad 2XMMi-Slim catalog"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.2XMMi-slim.sql || exit 1
#date '+%Y-%m-%d-%H:%M:%S'

echo -e "\t----------------------------"
echo -e "\tRelease MonetDB ${dbname}"
echo -e "\t----------------------------"

if [ -n "$create_database" ]
then
    monetdb $monetdb_login release ${dbname} || exit 1
fi
    monetdb set shared=lightcurve$NODE $dbname
    if [ $NODE -eq $nodes ]; then
        mfd=$mfd$username+$password@*/lightcurve$NODE
    else
        mfd=$mfd$username+$password@*/lightcurve$NODE,
    fi
    let NODE=NODE+1
done

monetdb discover *lightcurve*

echo "mclient -lsql+mf -d$mfd -s\"SELECT * FROM versions;\""

monetdb discover *lightcurve*

#mclient -lsql+mf -d$mfd -s"SELECT * FROM versions;"

echo -e "-----"
echo -e "READY"
echo -e "-----"
