#!/bin/bash

# assume:
# - mclient/monetdb are in path
# - user/pass is monetdb

# script performs:
# - if meroport and meropass are set, (re)create database and initialise
# - scrambling administrator account to something else for sugagurity
# - create voc user/schema
# - load voc dataset
# - create webdemo user with password webdemo in schema webdemo
# - create views for tables from voc set in webdemo schema

# arguments:
# $1: host
# $2: database
# $3 (optional): new user
# $4 (optional): new password

# An example call of this script could be:
# %> ./setup.db.batch host port database meroport meropass useradminname adminpassword
# %> ./setup.db.batch localhost 50000 pipeline_develop 50001 xxxxxxxxxxxxxxxxxxxxxxxxx lofar xxx
# %> ./setup.db.batch localhost 50000 pipeline_develop 50001 xxxxxxxxxxxxxxxxxxxxxxxxx lofar xxx
# to create database on host, which can be controlled over port
# 50001 using control passphrase $#$#.  Port 50000 on host is
# used for mclient to connect to the database database and populate it.
# You better make sure you save the output of this script (or remember your command)
# as it resets the username and password of the admin user (which by default is
# monetdb/monetdb).

if [ -z "$*" ]
then
    echo "Usage:"
    echo "$0 [options]  db-host  database-name  [ username ]  [ password ]"
    echo "Options: --no-create-database: do not create a database"
    exit ;
fi

create_database=1
# parse through options
while true
do
    case "$1" in
        --no-create-database) 
            unset create_database
            shift 1
            ;;
        --) 
	    # end of all options
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

monetdb_login=""
if [ -f ${HOME}/.merovingian ]
then
    monetdb_login="-hldb001 -P"`cat ${HOME}/.merovingian`
fi

if [ -n "$create_database" ]
# Need to create a new database
then
    echo "(re)creating ${2} at ${1}"
    #monetdb -h$1 -p$4 -P$5 stop ${2}
    monetdb $monetdb_login stop ${2}
    monetdb $monetdb_login destroy -f ${2}  # use the force, better have $3 sane
    monetdb $monetdb_login create ${2} || exit 1
    # still in maintenance so start manually
    monetdb $monetdb_login start ${2} || exit 1
    #fi
    
    if [ -z "$3" ]
    then
        adminuser="tkp"
    else
        adminuser=$3
    fi
    if [ -z "$4" ]
    then
        adminpassword="tkp"
    else
        adminpassword=$4
    fi
    
    DEFAULTDOTFILE=.monetdb
    if [ -z "$MONETDBHOME" ]
    then
        MONETDBHOME=$HOME
    fi
    DOTMONETDBFILE=$MONETDBHOME/$DEFAULTDOTFILE
    #export DOTMONETDBFILE
    
    # set up a default .monetdb file, with default pass
    cat > $DOTMONETDBFILE <<EOF
user=monetdb
password=monetdb
EOF
    
    echo "changing monetdb/monetdb user/password into:"
    echo "user: ${adminuser}"
    echo "password: ${adminpassword}"
    mclient -lsql -h$1 -d$2 <<-EOF
ALTER USER "monetdb" RENAME TO "${adminuser}";
ALTER USER SET PASSWORD '${adminpassword}' USING OLD PASSWORD 'monetdb';
CREATE SCHEMA "${2}" AUTHORIZATION "${adminuser}";
ALTER USER "${adminuser}" SET SCHEMA "${2}";
EOF
    
    cat > $DOTMONETDBFILE <<EOF
user=${adminuser}
password=${adminpassword}
EOF
    
    chmod go-rwx $DOTMONETDBFILE
else
    monetdb $monetdb_login lock ${2}
fi

if [ -z "$MONETDBTKPHOME" ]
# user didn't define a 'home' (base) directory; make a good guess
then
    MONETDBTKPHOME=`dirname $0`/..
fi


echo -e "\t----------------------------------------"
echo -e "\tCreating MonetDB ${2} tables"
echo -e "\t----------------------------------------"

echo -e "\t\tCreating MonetDB ${2} table versions"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.versions.sql

echo -e "\t\tCreating MonetDB ${2} table frequencybands"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.frequencybands.sql

echo -e "\t\tCreating MonetDB ${2} table datasets"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.datasets.sql

echo -e "\t\tCreating MonetDB ${2} table images"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.images.sql

#echo -e "\t\tCreating MonetDB ${2} table associationclass"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.associationclass.sql

echo -e "\t\tCreating MonetDB ${2} table catalogs"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.catalogs.sql

echo -e "\t\tCreating MonetDB ${2} table catalogedsources"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.catalogedsources.sql

echo -e "\t\tCreating MonetDB ${2} table extractedsources"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.extractedsources.sql

#echo -e "\t\tCreating MonetDB ${2} table loadxtrsources"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.loadxtrsources.sql

#echo -e "\t\tCreating MonetDB ${2} table basesources"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.basesources.sql

#echo -e "\t\tCreating MonetDB ${2} table tempbasesources"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.tempbasesources.sql

echo -e "\t\tCreating MonetDB ${2} table assoccatsources"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.assoccatsources.sql

echo -e "\t\tCreating MonetDB ${2} table assocxtrsources"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.assocxtrsources.sql

#echo -e "\t\tCreating MonetDB ${2} table aux_assocs"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.aux_assocs.sql

echo -e "\t\tCreating MonetDB ${2} table lsm"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.lsm.sql

#echo -e "\t\tCreating MonetDB ${2} table spectralindices"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.spectralindices.sql

echo -e "\t\tCreating MonetDB ${2} table runningcatalog"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.runningcatalog.sql

echo -e "\t\tCreating MonetDB ${2} table temprunningcatalog"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.temprunningcatalog.sql

echo -e "\t\tCreating MonetDB ${2} table detections"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.detections.sql


#echo -e "\t\tCreating MonetDB ${2} table zoneheight"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.zoneheight.sql

#echo -e "\t\tCreating MonetDB ${2} table zones"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.zones.sql

#echo -e "\t\tCreating MonetDB ${2} Query History"
#mclient -lsql -h${1} -d${2} < ${MONETDBHOME}/share/MonetDB/sql/history.sql

#echo -e "\t-------------------------------------------------------------------------"
#echo -e "\tCreating MonetDB ${2} tables for multiple catalog association"
#echo -e "\t-------------------------------------------------------------------------"

#echo -e "\t\tCreating MonetDB ${2} table multiplecatalogsources"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.multiplecatalogsources.sql

#echo -e "\t\tCreating MonetDB ${2} table multiplecatalogassocs"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.multiplecatalogassocs.sql

## -----------------------------------------------------
## Tables to store detected transients & classifications
## -----------------------------------------------------

echo -e "\t\tCreating MonetDB ${2} table transients"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.transients.sql

echo -e "\t\tCreating MonetDB ${2} table classification"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/tables/create.table.classification.sql



echo -e "\t-------------------------------------------"
echo -e "\tCreating MonetDB ${2} functions"
echo -e "\t-------------------------------------------"

# These functions are embedded in the sys db ;)
#echo -e "\t\tCreating MonetDB ${2} math functions"
#mclient -lsql -h${1} -d${2} < ${MONETDBHOME}/lib/MonetDB5/math.sql

#echo -e "\t\tCreating MonetDB ${2} date functions"
#mclient -lsql -h${1} -d${2} < ${MONETDBHOME}/lib/MonetDB5/date.sql

#echo -e "\t\tCreating MonetDB ${2} times functions"
#mclient -lsql -h${1} -d${2} < ${MONETDBHOME}/lib/MonetDB5/times.sql

#echo -e "\t\tCreating MonetDB ${2} mtime functions"
#mclient -lsql -h${1} -d${2} < /scratch/bscheers/databases/MonetDB/share/MonetDB/sql/mtime.sql

echo -e "\t\tCreating MonetDB ${2} function deg"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.deg.sql

echo -e "\t\tCreating MonetDB ${2} function rad"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.rad.sql

echo -e "\t\tCreating MonetDB ${2} function alpha"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.alpha.sql

#echo -e "\t\tCreating MonetDB ${2} function getVectorLength"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getVectorLength.sql

echo -e "\t\tCreating MonetDB ${2} function getDistanceArcsec"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getDistanceArcsec.sql

echo -e "\t\tCreating MonetDB ${2} function getDistanceXSource2CatArcsec"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getDistanceXSource2CatArcsec.sql

echo -e "\t\tCreating MonetDB ${2} function getDistanceXSourcesArcsec"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getDistanceXSourcesArcsec.sql

echo -e "\t\tCreating MonetDB ${2} function solidangle_arcsec2"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.solidangle_arcsec2.sql

#echo -e "\t\tCreating MonetDB ${2} function getWeightRectIntersection"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getWeightRectIntersection.sql

#echo -e "\t\tCreating MonetDB ${2} function doSourcesIntersect"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.doSourcesIntersect.sql

#echo -e "\t\tCreating MonetDB ${2} function doPosErrCirclesIntersect"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.doPosErrCirclesIntersect.sql

echo -e "\t\tCreating MonetDB ${2} function getNeighborsinCat"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getNeighborsInCat.sql

echo -e "\t\tCreating MonetDB ${2} function getNearestNeighborInCat"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getNearestNeighborInCat.sql

echo -e "\t\tCreating MonetDB ${2} function getNearestNeighborInImage"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getNearestNeighborInImage.sql

echo -e "\t\tCreating MonetDB ${2} function getBand"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getBand.sql

echo -e "\t\tCreating MonetDB ${2} function decl2deg"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.decl2deg.sql

echo -e "\t\tCreating MonetDB ${2} function decl2dms"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.decl2dms.sql

echo -e "\t\tCreating MonetDB ${2} function decl2bbsdms"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.decl2bbsdms.sql

echo -e "\t\tCreating MonetDB ${2} function insertDataset"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.insertDataset.sql

echo -e "\t\tCreating MonetDB ${2} function insertImage"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.insertImage.sql

#echo -e "\t\tCreating MonetDB ${2} function selectAssocs"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.selectAssocs.sql

echo -e "\t\tCreating MonetDB ${2} function ra2deg"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.ra2deg.sql

echo -e "\t\tCreating MonetDB ${2} function ra2hms"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.ra2hms.sql

echo -e "\t\tCreating MonetDB ${2} function ra2bbshms"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.ra2bbshms.sql

echo -e "\t\tCreating MonetDB ${2} function getSkyDensity_deg2"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getSkyDensity_sr.sql

echo -e "\t\tCreating MonetDB ${2} function getHuynhSkyDensity_deg2"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.getHuynhSkyDensity_deg2.sql

echo -e "\t\tCreating MonetDB ${2} function localSourceDensityInCat_deg2"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/functions/create.function.localSourceDensityInCat_deg2.sql


echo -e "\t----------------------------------------------------"
echo -e "\tCreating MonetDB ${2} general procedures"
echo -e "\t----------------------------------------------------"

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocXSources2XSourcesByImage"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocXSources2XSourcesByImage.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocXSources2CatByImage"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocXSources2CatByImage.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocXSources2CatByZones"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocXSources2CatByZones.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocXSrc2XSrc"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocXSrc2XSrc.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocXSrc2XCat"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocXSrc2Cat.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocWenssSources2Cat"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocWenssSources2Cat.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocWenssSources2CatByZones"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocWenssSources2CatByZones.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure AssocWenssSources2CatByImage"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.AssocWenssSources2CatByImage.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure BuildAssociationClass"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.BuildAssociationClass.sql

echo -e "\t\tCreating MonetDB ${2} general procedure BuildFrequencyBands"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.BuildFrequencyBands.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure BuildZones"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.BuildZones.sql

echo -e "\t\tCreating MonetDB ${2} general procedure InsertVersion"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.InsertVersion.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure InsertSrc"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.InsertSrc.sql

echo -e "\t\tCreating MonetDB ${2} general procedure LoadLSM"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.LoadLSM.sql

#echo -e "\t\tCreating MonetDB ${2} general procedure LoadWenssSourceAndBGFields"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.LoadWenssSourceAndBGFields.sql


#echo -e "\t-----------------------------------------------------------------------------"
#echo -e "\tCreating MonetDB ${2} procedures for multiple catalog association"
#echo -e "\t-----------------------------------------------------------------------------"

#echo -e "\t\tCreating MonetDB ${2} specific procedure MultipleCatMatchingInit"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.MultipleCatMatchingInit.sql

#echo -e "\t\tCreating MonetDB ${2} specific procedure MultipleCatMatching"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/procedures/create.procedure.MultipleCatMatching.sql


echo -e "\t-----------------------------------"
echo -e "\tInitialize MonetDB ${2}"
echo -e "\t-----------------------------------"

echo -e "\t\tInitialize MonetDB ${2} tables"
mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/init/init.tables.sql


echo -e "\t----------------------------------------------"
echo -e "\tLoading catalogs into MonetDB ${2}"
echo -e "\t----------------------------------------------"

#date '+%Y-%m-%d-%H:%M:%S'

#echo -e "\t\tLoad catalogs"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/copy.catalogs.sql
#echo -e "\t\tLoad catalogedsources"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/copy.catalogedsources.sql

echo -e "\t\tLoad NVSS catalog"
mclient -t -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/load.cat.nvss.sql
date '+%Y-%m-%d-%H:%M:%S'

echo -e "\t\tLoad VLSS catalog"
mclient -t -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/load.cat.vlss.sql
date '+%Y-%m-%d-%H:%M:%S'

echo -e "\t\tLoad WENSS catalog"
mclient -t -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/load.cat.wenss.sql
date '+%Y-%m-%d-%H:%M:%S'

#echo -e "\t\tLoad GRB catalog"
#mclient -t -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/load.cat.grb.sql
#date '+%Y-%m-%d-%H:%M:%S'

#echo -e "\t\tLoad SIMDATA catalog"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/load.cat.simdata.sql
#date '+%Y-%m-%d-%H:%M:%S'

#echo -e "\t\tLoad 2XMMi-Slim catalog"
#mclient -lsql -h${1} -d${2} < $MONETDBTKPHOME/load/load.cat.2XMMi-slim.sql
#date '+%Y-%m-%d-%H:%M:%S'

echo -e "\t----------------------------"
echo -e "\tRelease MonetDB ${2}"
echo -e "\t----------------------------"

#if [[ -n $4 && -n $5 ]] ; then
    # to be able to login as non-root, we need to be out of maintenance
if [ -n "$create_database" ]
then
    monetdb $monetdb_login release ${2} || exit 1
fi

echo -e "-----"
echo -e "READY"
echo -e "-----"
