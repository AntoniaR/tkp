#!/bin/bash

###############################################################################
# The assumption here is that the monetdbd deamon program is running, its     #
# properties (port, passphrase, etc.) are set, so that the database can be    #
# created.                                                                    #
# And furthermore that mclient & monetdb are in the path, and the user/passw  #
# is monetdb.                                                                 #
###############################################################################

###############################################################################
# arguments:                                                                  #
# $1: host                                                                    #
# $2: database                                                                #
# $3: new user                                                                #
# $4: new password                                                            #
# $5: port                                                                    #
# $6: sequence number of the node (in total range of nodes, sharded set-up)   #
# $7: total number of nodes in the sharded set-up                             #
###############################################################################

###############################################################################
# An example call of this script could be:                                    #
# %> ./setup.sharded.db.scilend.batch localhost dbname user pw 51000 2 8      #
# creates dbname on the 2nd node, where a total of 8 nodes are set up in the  #
# sharded configuration. The user/pw will be converted to user1/pw1.          #
###############################################################################

# Set up defaults
host=$1
dbname=$2$6
username=$3$6
password=$4$6
port=$5
seqnr=$6
nodes=$7

monetdb_login=""
if [ -f ${HOME}/.meropass ]
then
    monetdb_login="-h$host -p$port -P"`cat ${HOME}/.meropass`
fi

echo "(re)creating $dbname at $host"
monetdb $monetdb_login stop $dbname
monetdb $monetdb_login destroy -f $dbname
monetdb $monetdb_login create $dbname #|| exit 1
monetdb $monetdb_login start $dbname #|| exit 1
    
adminuser=$username
adminpassword=$password
    
DEFAULTDOTFILE=.monetdb
DOTMONETDBFILE=$HOME/$DEFAULTDOTFILE

# set up a default .monetdb file, with default pass
cat > $DOTMONETDBFILE <<EOF
user=monetdb
password=monetdb
EOF
    
echo "changing monetdb/monetdb user/password into:"
echo "user: ${adminuser}"
echo "password: ${adminpassword}"
mclient -h$host -p$port -d$dbname <<-EOF
ALTER USER "monetdb" RENAME TO "${adminuser}";
ALTER USER SET PASSWORD '${adminpassword}' USING OLD PASSWORD 'monetdb';
CREATE SCHEMA "${dbname}" AUTHORIZATION "${adminuser}";
ALTER USER "${adminuser}" SET SCHEMA "${dbname}";
EOF
    
# Here we set the DOTMONETDBFILE to the credentials of the current dbname
DOTMONETDBFILE=$HOME/.${dbname}
cat > $DOTMONETDBFILE <<EOF
user=${adminuser}
password=${adminpassword}
EOF
chmod go-rwx $DOTMONETDBFILE
export DOTMONETDBFILE

echo -e "\t----------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables"
echo -e "\t----------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table versions"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.versions.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table frequencybands"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.frequencybands.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table datasets"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.datasets.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table images"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.images.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table catalogs"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.catalogs.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table catalogedsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.catalogedsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table extractedsources"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.extractedsources.sql || exit 1
$MONETDBTKPHOME/tables/create.table.extractedsources.sh $host $dbname $port $seqnr $nodes || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table assoccatsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.assoccatsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table assocxtrsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.assocxtrsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table lsm"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.lsm.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} table spectralindices"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.spectralindices.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table runningcatalog"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.runningcatalog.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table temprunningcatalog"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.temprunningcatalog.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table detections"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.detections.sql || exit 1

echo -e "\t-------------------------------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables for sharded database"
echo -e "\t-------------------------------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table node"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.node.sql || exit 1

echo -e "\t-------------------------------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables for cross-catalogue association"
echo -e "\t-------------------------------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table selectedcatsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.selectedcatsources.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table tempmergedcatalogs"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.tempmergedcatalogs.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table mergedcatalogs"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.mergedcatalogs.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table assoccrosscatsources"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.assoccrosscatsources.sql || exit 1

echo -e "\t----------------------------------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} tables to store detected transients & classifications "
echo -e "\t----------------------------------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} table monitoringlist"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.monitoringlist.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table transients"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.transients.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} table classification"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/tables/create.table.classification.sql || exit 1

echo -e "\t-------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} functions"
echo -e "\t-------------------------------------------"

# These functions are also mbedded in the sys schema
echo -e "\t\tCreating MonetDB ${dbname} math functions"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/monetdb_10_math.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} date functions"
#mclient -p$port -h$host -d${dbname} < ${MONETDBHOME}/lib/MonetDB5/date.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} times functions"
#mclient -p$port -h$host -d${dbname} < ${MONETDBHOME}/lib/MonetDB5/times.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} mtime functions"
#mclient -p$port -h$host -d${dbname} < /scratch/bscheers/databases/MonetDB/share/MonetDB/sql/mtime.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function alpha"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.alpha.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getDistanceArcsec"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getDistanceArcsec.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getDistanceXSource2CatArcsec"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getDistanceXSource2CatArcsec.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getDistanceXSourcesArcsec"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getDistanceXSourcesArcsec.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function solidangle_arcsec2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.solidangle_arcsec2.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function nearestNeighborInCat"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.nearestNeighborInCat.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getNeighborsinCat"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getNeighborsInCat.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getNearestNeighborInCat"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getNearestNeighborInCat.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getNearestNeighborInImage"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getNearestNeighborInImage.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getBand"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getBand.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function decl2deg"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.decl2deg.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function decl2dms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.decl2dms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function decl2bbsdms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.decl2bbsdms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function insertDataset"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.insertDataset.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function insertImage"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.insertImage.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getAssocParams"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getAssocParams.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getAssocParamsByPos"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getAssocParamsByPos.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function ra2deg"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.ra2deg.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function ra2hms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.ra2hms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function ra2bbshms"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.ra2bbshms.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getSkyDensity_deg2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getSkyDensity_sr.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function getHuynhSkyDensity_deg2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.getHuynhSkyDensity_deg2.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function localSourceDensityInCat_deg2"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.localSourceDensityInCat_deg2.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function neighborsInCatsParams"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.neighborsInCatsParams.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} function neighborsInCats"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/functions/create.function.neighborsInCats.sql || exit 1


echo -e "\t----------------------------------------------------"
echo -e "\tCreating MonetDB ${dbname} general procedures"
echo -e "\t----------------------------------------------------"

echo -e "\t\tCreating MonetDB ${dbname} general procedure BuildFrequencyBands"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.BuildFrequencyBands.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} general procedure InsertVersion"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.InsertVersion.sql || exit 1 

echo -e "\t\tCreating MonetDB ${dbname} general procedure BuildNodes"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.BuildNodes.sql || exit 1

echo -e "\t\tCreating MonetDB ${dbname} general procedure LoadLSM"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.LoadLSM.sql || exit 1

#echo -e "\t-----------------------------------------------------------------------------"
#echo -e "\tCreating MonetDB ${dbname} procedures for multiple catalog association"
#echo -e "\t-----------------------------------------------------------------------------"

#echo -e "\t\tCreating MonetDB ${dbname} specific procedure MultipleCatMatchingInit"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.MultipleCatMatchingInit.sql || exit 1

#echo -e "\t\tCreating MonetDB ${dbname} specific procedure MultipleCatMatching"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/procedures/create.procedure.MultipleCatMatching.sql || exit 1

echo -e "\t-----------------------------------"
echo -e "\tInitialize MonetDB ${dbname}"
echo -e "\t-----------------------------------"

echo -e "\t\tInitialize MonetDB ${dbname} tables"
mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/init/init.shard.tables.sql || exit 1

#
# What to do here? How do we know what the best scheme is to spread the zones
# over the nodes?
if [ $seqnr -eq 1 ]; then
    mclient -p$port -h$host -d${dbname} -s"CALL BuildNodes(-90, 0, FALSE)"
else
    if [ $seqnr -lt $nodes ]; then
        z_min=$seqnr*10
        z_max=($seqnr+1)*10
        mclient -p$port -h$host -d${dbname} -s"CALL BuildNodes($z_min, $z_max, FALSE)"
    else
        z_min=$seqnr*10
        z_max=($seqnr+1)*10
        mclient -p$port -h$host -d${dbname} -s"CALL BuildNodes($z_min, $z_max, TRUE)"
    fi
fi

echo -e "\t----------------------------------------------"
echo -e "\tLoading catalogs into MonetDB ${dbname}"
echo -e "\t----------------------------------------------"

echo -e "\t\tLoad NVSS catalog"
time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.nvss.sql || exit 1

echo -e "\t\tLoad VLSS catalog"
time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.vlss.sql || exit 1

echo -e "\t\tLoad WENSS catalog"
time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.wenss.sql || exit 1 
#echo -e "\t\tLoad EXOplanets catalog"
#time mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.exo.sql || exit 1

#echo -e "\t\tLoad GRB catalog"
#mclient -p$port -lsql -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.grb.sql || exit 1

#echo -e "\t\tLoad SIMDATA catalog"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.simdata.sql || exit 1

#echo -e "\t\tLoad 2XMMi-Slim catalog"
#mclient -p$port -h$host -d${dbname} < $MONETDBTKPHOME/load/load.cat.2XMMi-slim.sql || exit 1

echo -e "\t---------------------------------"
echo -e "\tShare & Release MonetDB ${dbname}"
echo -e "\t---------------------------------"

monetdb set shared=lightcurve$seqnr $dbname
monetdb $monetdb_login release ${dbname} || exit 1

echo -e "-----"
echo -e "READY"
echo -e "-----"
