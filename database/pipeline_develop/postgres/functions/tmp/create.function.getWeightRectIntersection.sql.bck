--DROP FUNCTION getWeightRectIntersection;

/*+-------------------------------------------------------------------+
 *| This function quantifies a source intersection by a weight number.|
 *| If two sources do not intersect the weight is -1, if there is     |
 *| the weight is the solid angle of the intersection area divided by |
 *| the area of the smallest positional error.                        |
 *| This function uses the ra and decl, and their errors in arcsec.   |
 *| To take ra inflation into account, we use the function alpha, so  |
 *| the ra + alpha(ra_err) are correctly set.                         |
 *|                                                                   |
 *| As an example the case where source 1 is SOUTHEAST of source 2:   |
 *|                                                                   |
 *|              +---------+                                          |
 *|              |  tr     |                                          |
 *|      +-------+---o* 2  |< decl_max                                |
 *|      |       |   |     |                ^                         |
 *|      |       o---+-----+< decl_min      |                         |
 *|      |    1* bl  |                     decl                       |
 *|      |           |                      |                         |
 *|      |           |                                                |
 *|      +-----------+                                                |
 *|              ^   ^                                                |
 *|          ra_max  ra_min                                           |
 *|                                                                   |
 *|                     <-- ra --                                     |
 *|                                                                   |
 *+-------------------------------------------------------------------+
 *|                                                                   |
 *+-------------------------------------------------------------------+
 */
CREATE FUNCTION getWeightRectIntersection(i1ra double precision
                                         ,i1decl double precision
                                         ,i1ra_err double precision
                                         ,i1decl_err double precision
                                         ,i2ra double precision
                                         ,i2decl double precision
                                         ,i2ra_err double precision
                                         ,i2decl_err double precision
                                         ) RETURNS double precision as $$
BEGIN
  
  DECLARE southeast, northeast, southwest, northwest BOOLEAN;
  DECLARE ra1_err, decl1_err, ra2_err, decl2_err double precision;
  DECLARE tr_ra, tr_decl, bl_ra, bl_decl double precision;
  DECLARE tl_ra, tl_decl, br_ra, br_decl double precision;
  DECLARE dointersect BOOLEAN;
  DECLARE ra_min, ra_max, decl_min, decl_max double precision;
  DECLARE intersection_area, area1, area2, weight double precision;
  SELECT FALSE
        ,FALSE
        ,FALSE
        ,FALSE
        ,FALSE
    INTO southeast
        ,northeast
        ,southwest
        ,northwest
        ,dointersect
  ;

  /**
   * The ra_err is inflated at declinations near the pole. 
   * To calculate the new value we use the function alpha and
   * convert from arcsec to degrees.
   */
67
68
  SET ra1_err = alpha(i1ra_err / 3600, i1decl);
68
70
  SET decl1_err = i1decl_err / 3600;
69
72
  SET ra2_err = alpha(i2ra_err / 3600, i2decl);
70
74
  SET decl2_err = i2decl_err / 3600;
  
  IF i1ra > i2ra THEN
    /* source 1 is east of source 2 */
    IF i1decl < i2decl THEN
      /* source 1 is southeast of source 2 */
76
81
      SET southeast = TRUE;
    ELSE
      /* source 1 is northeast of source 2 */
79
85
      SET northeast = TRUE;
    END IF;
  ELSE
    /* source 1 is west of source 2 */
    IF i1decl < i2decl THEN
      /* source 1 is southwest of source 2 */
85
92
      SET southwest = TRUE;
    ELSE
      /* source 1 is northwest of source 2 */
88
96
      SET northwest = TRUE;
    END IF;
  END IF;

  IF southeast = TRUE THEN
93
102
    SET tr_ra = i1ra - ra1_err;
94
104
    SET tr_decl = i1decl + decl1_err;
95
106
    SET bl_ra = i2ra + ra2_err;
96
108
    SET bl_decl = i2decl - decl2_err;
    IF tr_ra < bl_ra AND tr_decl > bl_decl THEN
98
111
      SET dointersect = TRUE;
    END IF;
    IF dointersect = TRUE THEN
      IF tr_ra < i2ra - ra2_err THEN
102
116
        SET ra_min = i2ra - ra2_err;
      ELSE
104
119
        SET ra_min = tr_ra;
      END IF;
      IF bl_ra > i1ra + ra1_err THEN
107
123
        SET ra_max = i1ra + ra1_err;
      ELSE
109
126
        SET ra_max = bl_ra;
      END IF;
      IF bl_decl < i1decl - decl1_err THEN
112
130
        SET decl_min = i1decl - decl1_err;
      ELSE
114
133
        SET decl_min = bl_decl;
      END IF;
      IF tr_decl > i2decl + decl2_err THEN
117
137
        SET decl_max = i2decl + decl2_err;
      ELSE
119
140
        SET decl_max = tr_decl;
      END IF;
    END IF;
  END IF;

  IF northeast = TRUE THEN
125
147
    SET br_ra = i1ra - ra1_err;
126
149
    SET br_decl = i1decl - decl1_err;
127
151
    SET tl_ra = i2ra + ra2_err;
128
153
    SET tl_decl = i2decl + decl2_err;
    IF tl_ra > br_ra AND tl_decl > br_decl THEN
130
156
      SET dointersect = TRUE;
    END IF;
    IF dointersect = TRUE THEN
      IF br_ra < i2ra - ra2_err THEN
134
161
        SET ra_min = i2ra - ra2_err;
      ELSE
136
164
        SET ra_min = br_ra;
      END IF;
      IF tl_ra > i1ra + ra1_err THEN
139
168
        SET ra_max = i1ra + ra1_err;
      ELSE
141
171
        SET ra_max = tl_ra;
      END IF;
      IF br_decl < i2decl - decl2_err THEN
144
175
        SET decl_min = i2decl - decl2_err;
      ELSE
146
178
        SET decl_min = br_decl;
      END IF;
      IF tl_decl > i1decl + decl1_err THEN
149
182
        SET decl_max = i1decl + decl1_err;
      ELSE
151
185
        SET decl_max = tl_decl;
      END IF;
    END IF;
  END IF;

  IF southwest = TRUE THEN
157
192
    SET tl_ra = i1ra + ra1_err;
158
194
    SET tl_decl = i1decl + decl1_err;
159
196
    SET br_ra = i2ra - ra2_err;
160
198
    SET br_decl = i2decl - decl2_err;
    IF tl_ra > br_ra AND tl_decl > br_decl THEN
162
201
      SET dointersect = TRUE;
    END IF;
    IF dointersect = TRUE THEN
      IF br_ra < i1ra - ra1_err THEN
166
206
        SET ra_min = i1ra - ra1_err;
      ELSE
168
209
        SET ra_min = br_ra;
      END IF;
      IF tl_ra > i2ra + ra2_err THEN
171
213
        SET ra_max = i2ra + ra2_err;
      ELSE
173
216
        SET ra_max = tl_ra;
      END IF;
      IF br_decl < i1decl - decl1_err THEN
176
220
        SET decl_min = i1decl - decl1_err;
      ELSE
178
223
        SET decl_min = br_decl;
      END IF;
      IF tl_decl > i2decl + decl2_err THEN
181
227
        SET decl_max = i2decl + decl2_err;
      ELSE
183
230
        SET decl_max = tl_decl;
      END IF;
    END IF;
  END IF;

  IF northwest = TRUE THEN
189
237
    SET bl_ra = i1ra + ra1_err;
190
239
    SET bl_decl = i1decl - decl1_err;
191
241
    SET tr_ra = i2ra - ra2_err;
192
243
    SET tr_decl = i2decl + decl2_err;
    IF tr_ra < bl_ra AND tr_decl > bl_decl THEN
194
246
      SET dointersect = TRUE;
    END IF;
    IF dointersect = TRUE THEN
      IF tr_ra < i1ra - ra1_err THEN
198
251
        SET ra_min = i1ra - ra1_err;
      ELSE
200
254
        SET ra_min = tr_ra;
      END IF;
      IF bl_ra > i2ra + ra2_err THEN
203
258
        SET ra_max = i2ra + ra2_err;
      ELSE
205
261
        SET ra_max = bl_ra;
      END IF;
      IF bl_decl < i2decl - decl2_err THEN
208
265
        SET decl_min = i2decl - decl2_err;
      ELSE
210
268
        SET decl_min = bl_decl;
      END IF;
      IF tr_decl > i1decl + decl1_err THEN
213
272
        SET decl_max = i1decl + decl1_err;
      ELSE
215
275
        SET decl_max = tr_decl;
      END IF;
    END IF;
  END IF;

  IF dointersect = TRUE THEN
221
282
    SET intersection_area = solidangle_arcsec2(ra_min
                                              ,ra_max
                                              ,decl_min
                                              ,decl_max
                                              );
226
288
    SET area1 = solidangle_arcsec2(i1ra - ra1_err
                                  ,i1ra + ra1_err
                                  ,i1decl - decl1_err
                                  ,i1decl + decl1_err
                                  );
231
294
    SET area2 = solidangle_arcsec2(i2ra - ra2_err
                                  ,i2ra + ra2_err
                                  ,i2decl - decl2_err
                                  ,i2decl + decl2_err
                                  );
    IF area1 < area2 THEN
237
301
      SET weight = intersection_area / area1;
    ELSE
239
304
      SET weight = intersection_area / area2;
    END IF;
  ELSE
242
308
    SET weight = -1;
  END IF;

  RETURN weight;

END;
$$ language plpgsql;
