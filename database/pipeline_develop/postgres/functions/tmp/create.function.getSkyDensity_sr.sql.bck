--DROP FUNCTION getSkyDensity_sr;

/*
 * This function calculates the mean sky density of sources
 * per steradian to be expected in at the specified frequency and 
 * from a lower flux limit as specified, based on the model from 
 * Huynh et al. (2005)
 * ifreq in MHz, iSnu_min in Jy.
 * Returns numebr of sources per steradian.
 */
CREATE FUNCTION getSkyDensity_sr(ifreq double precision
                                ,iSnu_min double precision
                                ) RETURNS double precisionas $$
BEGIN

  DECLARE a0, a1, a2, a3, a4, a5, a6 double precision;
  DECLARE scale, Snu_first, fac1, sum, dSnu, mdSnu, Smax double precision;
  DECLARE N, dN double precision;
  DECLARE l, block INT;

21
22
  SET scale = POWER(ifreq / 1400, 0.7);
22
24
  SET N = 0;
23
26
  SET dN = 0;
24
28
  SET sum = 0;
25
30
  SET dSnu = 0;
26
32
  SET mdSnu = 0;
27
34
  SET Smax = 10;
28
36
  SET block = 0;
29
38
  SET a0 = 0.841;
30
40
  SET a1 = 0.540;
31
42
  SET a2 = 0.364;
32
44
  SET a3 = -0.063;
33
46
  SET a4 = -0.107;
34
48
  SET a5 = 0.052;
35
50
  SET a6 = -0.007;

  WHILE (mdSnu <= Smax) DO
38
54
    SET Snu_first = iSnu_min * POWER(10, block);
39
56
    SET dSnu = Snu_first / 10;
40
58
    SET mdSnu = Snu_first;
41
60
    SET l = 0;
    WHILE (l < 90 AND mdSnu <= Smax) DO
43
63
        SET fac1 = 1 / POWER(scale * mdSnu, 2.5);
44
65
        SET sum =   a0 * POWER(LOG10(scale * mdSnu * 1000), 0)
                  + a1 * POWER(LOG10(scale * mdSnu * 1000), 1)
                  + a2 * POWER(LOG10(scale * mdSnu * 1000), 2)
                  + a3 * POWER(LOG10(scale * mdSnu * 1000), 3)
                  + a4 * POWER(LOG10(scale * mdSnu * 1000), 4)
                  + a5 * POWER(LOG10(scale * mdSnu * 1000), 5)
                  + a6 * POWER(LOG10(scale * mdSnu * 1000), 6);
51
73
        SET dN = fac1 * POWER(10, sum) * scale * dSnu;
        IF mdSnu > iSnu_min / 3 THEN
53
76
            SET N = N + dN;
        END IF;
55
79
        SET mdSnu = mdSnu + dSnu;
56
81
        SET l = l + 1;
    END WHILE;
58
84
    SET block = block + 1;
  END WHILE;

  RETURN N;

END;
$$ language plpgsql;
